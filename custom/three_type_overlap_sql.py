if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@custom
def custom_sql_query():
    sql_query = "WITH p3_ids AS ( SELECT DISTINCT campaign FROM sponsored_ads_traffic ) ,p2_ids AS ( SELECT DISTINCT campaign_id ,campaign FROM dsp_impressions WHERE (campaign SIMILAR TO '(?i)VID') ) ,p1_ids as ( SELECT DISTINCT campaign_id ,campaign FROM dsp_impressions WHERE campaign_id NOT IN(SELECT campaign_id FROM p2_ids) ) ,purchases AS ( SELECT user_id ,max(conversion_event_dt) AS conversion_event_dt , SUM(purchases) AS p1_purchases , 0 AS p2_purchases , 0 AS p3_purchases , SUM(product_sales) AS sales FROM amazon_attributed_events_by_traffic_time a WHERE campaign_id IN (SELECT campaign_id FROM p1_ids) GROUP BY user_id UNION ALL SELECT user_id ,max(conversion_event_dt) AS conversion_event_dt , 0 AS p1_purchases , SUM(purchases) AS p2_purchases , 0 AS p3_purchases , SUM(product_sales) AS sales FROM amazon_attributed_events_by_traffic_time a WHERE campaign_id IN (SELECT campaign_id FROM p2_ids) GROUP BY user_id UNION ALL SELECT user_id ,max(conversion_event_dt) AS conversion_event_dt , 0 AS p1_purchases , 0 AS p2_purchases , SUM(total_purchases_clicks) AS p3_purchases , SUM(product_sales) AS sales FROM amazon_attributed_events_by_traffic_time a WHERE campaign IN (SELECT campaign FROM p3_ids) GROUP BY user_id ) ,purchases_last_total AS( SELECT user_id , max(conversion_event_dt) AS conversion_event_dt_last , sum(p1_purchases + p2_purchases + p3_purchases) AS purchases , sum(p1_purchases) AS p1_purchases , sum(p2_purchases) AS p2_purchases , sum(p3_purchases) AS p3_purchases , sum(sales) AS sales FROM purchases WHERE p1_purchases+p2_purchases+p3_purchases > 0 GROUP BY user_id ) ,impressions AS ( SELECT DISTINCT user_id , 'p1' AS IMP_ad_type , min(impression_dt) as impression_dt , sum(impressions) AS impressions FROM display_impressions a where impressions > 0 and campaign_id IN (SELECT campaign_id from p1_ids) GROUP BY user_id, IMP_ad_type UNION ALL SELECT DISTINCT user_id , 'p2' AS IMP_ad_type , min(impression_dt) as impression_dt , sum(impressions) AS impressions FROM display_impressions a WHERE impressions > 0 and campaign_id IN (SELECT campaign_id from p2_ids) GROUP BY user_id, IMP_ad_type UNION ALL SELECT DISTINCT user_id , 'p3' AS IMP_ad_type , min(event_dt) as impression_dt , sum(impressions) AS impressions FROM sponsored_ads_traffic a WHERE impressions > 0 GROUP BY user_id, IMP_ad_type ) ,impressions_first_total AS( SELECT user_id ,imp_ad_type ,min(impression_dt) as impression_dt_first ,sum(impressions) as impressions FROM impressions GROUP BY user_id ,imp_ad_type ) ,combined as ( SELECT imp.user_id as imp_user ,pur.user_id as pur_user ,imp.imp_ad_type ,pur.purchases ,pur.p1_purchases ,pur.p2_purchases ,pur.p3_purchases ,imp.impressions ,pur.sales ,CASE WHEN conversion_event_dt_last IS NULL THEN 'no purchase' WHEN conversion_event_dt_last > impression_dt_first THEN 'pre-purchase' WHEN conversion_event_dt_last < impression_dt_first THEN 'post-purchase' ELSE 'other' END AS impression_timing FROM purchases_last_total pur FULL OUTER JOIN impressions_first_total imp ON pur.user_id = imp.user_id ) ,binned_data as ( SELECT imp_user , pur_user ,SUM(IF(impression_timing = 'no purchase' AND imp_ad_type = 'p1', impressions, 0)) as no_purch_p1_impressions ,SUM(IF(impression_timing = 'pre-purchase' AND imp_ad_type = 'p1', impressions, 0)) as pre_purch_p1_impressions ,SUM(IF(impression_timing = 'no purchase' AND imp_ad_type = 'p2', impressions, 0)) as no_purch_p2_impressions ,SUM(IF(impression_timing = 'pre-purchase' AND imp_ad_type = 'p2', impressions, 0)) as pre_purch_p2_impressions ,SUM(IF(impression_timing = 'no purchase' AND imp_ad_type = 'p3', impressions, 0)) as no_purch_p3_impressions ,SUM(IF(impression_timing = 'pre-purchase' AND imp_ad_type = 'p3', impressions, 0)) as pre_purch_p3_impressions ,MAX(purchases) as purchases ,MAX(sales) as sales FROM combined GROUP BY imp_user,pur_user ) ,users_purchased AS( SELECT imp_user , pur_user , no_purch_p1_impressions , pre_purch_p1_impressions , no_purch_p2_impressions , pre_purch_p2_impressions , no_purch_p3_impressions , pre_purch_p3_impressions , purchases FROM binned_data WHERE purchases > 0 ) ,users_purchased_exp AS( SELECT IF((pre_purch_p1_impressions > 0 AND pre_purch_p2_impressions > 0 AND pre_purch_p3_impressions > 0) OR (no_purch_p1_impressions > 0 AND no_purch_p2_impressions > 0 AND no_purch_p3_impressions > 0 ), 'all', IF((pre_purch_p1_impressions > 0 AND pre_purch_p2_impressions > 0 AND pre_purch_p3_impressions = 0) OR (no_purch_p1_impressions > 0 AND no_purch_p2_impressions > 0 AND no_purch_p3_impressions = 0 ), 'Display & OTT', IF((pre_purch_p1_impressions > 0 AND pre_purch_p2_impressions = 0 AND pre_purch_p3_impressions > 0) OR (no_purch_p1_impressions > 0 AND no_purch_p2_impressions = 0 AND no_purch_p3_impressions > 0 ), 'Display & SP', IF((pre_purch_p1_impressions = 0 AND pre_purch_p2_impressions > 0 AND pre_purch_p3_impressions > 0) OR (no_purch_p1_impressions = 0 AND no_purch_p2_impressions > 0 AND no_purch_p3_impressions > 0 ), 'OTT & SP', IF((pre_purch_p1_impressions > 0 OR no_purch_p1_impressions > 0) AND (pre_purch_p2_impressions = 0 AND no_purch_p2_impressions = 0) AND (pre_purch_p3_impressions = 0 AND no_purch_p3_impressions = 0), 'Display Only', IF((pre_purch_p1_impressions = 0 AND no_purch_p1_impressions = 0) AND (pre_purch_p2_impressions > 0 OR no_purch_p2_impressions > 0) AND (pre_purch_p3_impressions = 0 AND no_purch_p3_impressions = 0), 'OTT Only', IF((pre_purch_p1_impressions = 0 AND no_purch_p1_impressions = 0) AND (pre_purch_p2_impressions = 0 AND no_purch_p2_impressions = 0) AND (pre_purch_p3_impressions > 0 OR no_purch_p3_impressions > 0), 'SP Only', IF((pre_purch_p1_impressions = 0 AND no_purch_p1_impressions = 0) AND (pre_purch_p2_impressions = 0 AND no_purch_p2_impressions = 0) AND (pre_purch_p3_impressions = 0 AND no_purch_p3_impressions = 0) , 'none', 'NA')))))))) AS exposure_group ,COUNT(distinct pur_user) as users_that_purchased FROM users_purchased GROUP BY exposure_group ) ,users_all_exp AS( SELECT '1' as join_key, IF((pre_purch_p1_impressions > 0 AND pre_purch_p2_impressions > 0 AND pre_purch_p3_impressions > 0) OR (no_purch_p1_impressions > 0 AND no_purch_p2_impressions > 0 AND no_purch_p3_impressions > 0 ), 'all', IF((pre_purch_p1_impressions > 0 AND pre_purch_p2_impressions > 0 AND pre_purch_p3_impressions = 0) OR (no_purch_p1_impressions > 0 AND no_purch_p2_impressions > 0 AND no_purch_p3_impressions = 0 ), 'Display & OTT', IF((pre_purch_p1_impressions > 0 AND pre_purch_p2_impressions = 0 AND pre_purch_p3_impressions > 0) OR (no_purch_p1_impressions > 0 AND no_purch_p2_impressions = 0 AND no_purch_p3_impressions > 0 ), 'Display & SP', IF((pre_purch_p1_impressions = 0 AND pre_purch_p2_impressions > 0 AND pre_purch_p3_impressions > 0) OR (no_purch_p1_impressions = 0 AND no_purch_p2_impressions > 0 AND no_purch_p3_impressions > 0 ), 'OTT & SP', IF((pre_purch_p1_impressions > 0 OR no_purch_p1_impressions > 0) AND (pre_purch_p2_impressions = 0 AND no_purch_p2_impressions = 0) AND (pre_purch_p3_impressions = 0 AND no_purch_p3_impressions = 0), 'Display Only', IF((pre_purch_p1_impressions = 0 AND no_purch_p1_impressions = 0) AND (pre_purch_p2_impressions > 0 OR no_purch_p2_impressions > 0) AND (pre_purch_p3_impressions = 0 AND no_purch_p3_impressions = 0), 'OTT Only', IF((pre_purch_p1_impressions = 0 AND no_purch_p1_impressions = 0) AND (pre_purch_p2_impressions = 0 AND no_purch_p2_impressions = 0) AND (pre_purch_p3_impressions > 0 OR no_purch_p3_impressions > 0), 'SP Only', IF((pre_purch_p1_impressions = 0 AND no_purch_p1_impressions = 0) AND (pre_purch_p2_impressions = 0 AND no_purch_p2_impressions = 0) AND (pre_purch_p3_impressions = 0 AND no_purch_p3_impressions = 0) , 'none', 'NA')))))))) AS exposure_group ,COUNT(distinct imp_user) as impression_reach ,SUM(purchases) as purchases ,SUM(sales) as sales FROM binned_data GROUP BY join_key,exposure_group ) SELECT CAST(BUILT_IN_PARAMETER('TIME_WINDOW_START') as date) as start_date ,CAST(BUILT_IN_PARAMETER('TIME_WINDOW_END') as date) as end_date ,CUSTOM_PARAMETER('Advertiser') as advertiser ,a.exposure_group ,users_that_purchased ,impression_reach ,purchases ,sales ,users_that_purchased/impression_reach as purchase_rate FROM users_all_exp a LEFT JOIN users_purchased_exp p ON a.exposure_group = p.exposure_group WHERE a.exposure_group <> 'none'"
    query_name = "three_type_overlap"
    return [sql_query, query_name]


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
